
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link type="text/css" rel="stylesheet" href="/assets/css/bootstrap.min.css">
    <link type="text/css" rel="stylesheet" href="/assets/css/style.css">
    <link type="text/css" rel="stylesheet" href="/assets/fonts/poppins.css">
</head>
<title>Ongoing Lecture - <%=courseTitle%></title>
</head>
<style>
    * {
        padding: 0;
        margin: 0;
        text-decoration: none;
        font-family: poppins;
    }

    .record-container {
        width: 100%;
        height: 100vh;
        background-color: #080b06;
        box-sizing: border-box;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .record-footage {
        display: flex;
        flex: .8;
    }

    .record-footage video {
        width: 100%;
        height: 100%;
    }

    .record-panel {
        display: flex;
        flex: .2;
        justify-content: space-between;
        padding: 0 3%;
        width: 100%;
        align-items: center;

    }

    .record-details {
        display: flex;
        flex-direction: column;
        color: #f2f2f2;
    }

    .record-details span, label {
        display: flex;
        color: #f2f2f2;
        align-items: center;
    }

    .record-details span h6 {
        color: rgba(7, 224, 7, 0.724);
    }

    .record-panel input {
        max-width: 200px;
        min-height: 50px;
        outline: none;
        border: none;
        background-color: #f2f2f2 !important;
        color: #080b06;
    }

    .record-panel button {
        width: 200px;
        height: 50px;
        outline: none;
        border: none;
        background-color: #f10606d2;
        color: #f2f2f2;
    }
</style>

<body>
    <div class="record-container">
        <div class="record-footage">
            <video src="" autoplay></video>
        </div>
        <div class="record-panel">
            <div class="record-details">
                <h3><%=lecturerName%></h3>
                <span>
                    <h5><%=courseTitle%> - </h5>
                    <h6><%=courseDay%></h6>
                </span>
            </div>
            <label for="attendance"></label>
            <input type="number" name="" id="attendance">
            <label for="week"></label>
            <input type="number" name="" id="week">
            <button type="button" id='stop-record'>Stop</button>
        </div>
    </div>
    <script src="https://www.WebRTC-Experiment.com/RecordRTC.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.26.0/axios.min.js"
        integrity="sha512-bPh3uwgU5qEMipS/VOmRqynnMXGGSRv+72H/N260MQeXZIK4PG48401Bsby9Nq5P5fz7hy5UGNmC/W1Z51h2GQ=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script>
        window.onload = async function () {
            const startTime = Date.now();
            const videoPreview = document.querySelector('video');
            let blobs = [];
            let recordedVideo = null;

            let cameraStream = await navigator.mediaDevices.getUserMedia({
                video: true,
                audio: true
            });
            videoPreview.srcObject = cameraStream;

            const videoRec = RecordRTC(cameraStream, {
                type: 'video',
                mineType: 'video/webm',
                disableLogs: true,
                recorderType: MediaStreamRecorder,
                ondataavailable: (blob) => {
                    blobs.push(blob)
                },

            })

            videoRec.startRecording();

            document.querySelector('#stop-record').onclick = () => {
                if (document.querySelector('#attendance').value <= 0 && document.querySelector('#week').value <= 0) {
                    alert('Please specify a valid attendance and week value!');
                    return;
                }

                videoRec.stopRecording(url => {
                    const stopTime = Date.now();
                    const id = window.location.href.split('/').pop();
                    const blob = videoRec.getBlob()
                    const file = new File([blob], 'videoRec.webm', {
                        type: 'video/webm'
                    });

                    const data = new FormData();
                    data.append('recording', file);
                    data.append('attendance', document.querySelector('#attendance').valueAsNumber);
                    data.append('week', document.querySelector('#week').valueAsNumber);
                    data.append('startTime', startTime);
                    data.append('endTime', stopTime);


                    axios.post(
                        `http://localhost:5500/update-recording/${id}`, 
                        data, 
                        {
                            headers: {
                                'Content-Type': 'multipart/formdata'
                            }
                        }).then((result) => {
                            window.location.replace('/')
                    }).catch((err) => {
                        console.log(err)
                    })

                })
            };

        }
    </script>
</body>

</html>